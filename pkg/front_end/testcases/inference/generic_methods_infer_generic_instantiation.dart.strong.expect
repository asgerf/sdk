library test;
import self as self;
import "dart:core" as core;
import "dart:math" as math;

class C extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  method m(core::num x, core::num y) → core::num
    return null;
}
static method main() → dynamic {
  self::takeIII(math::max);
  self::takeDDD(math::max);
  self::takeNNN(math::max);
  self::takeIDN(math::max);
  self::takeDIN(math::max);
  self::takeIIN(math::max);
  self::takeDDN(math::max);
  self::takeIIO(math::max);
  self::takeDDO(math::max);
  self::takeOOI(math::max);
  self::takeIDI(math::max);
  self::takeDID(math::max);
  self::takeOON(math::max);
  self::takeOOO(math::max);
  self::takeIII(math::min);
  self::takeDDD(math::min);
  self::takeNNN(math::min);
  self::takeIDN(math::min);
  self::takeDIN(math::min);
  self::takeIIN(math::min);
  self::takeDDN(math::min);
  self::takeIIO(math::min);
  self::takeDDO(math::min);
  self::takeOOI(math::min);
  self::takeIDI(math::min);
  self::takeDID(math::min);
  self::takeOON(math::min);
  self::takeOOO(math::min);
  self::takeIII(new self::C::•().m);
  self::takeDDD(new self::C::•().m);
  self::takeNNN(new self::C::•().m);
  self::takeIDN(new self::C::•().m);
  self::takeDIN(new self::C::•().m);
  self::takeIIN(new self::C::•().m);
  self::takeDDN(new self::C::•().m);
  self::takeIIO(new self::C::•().m);
  self::takeDDO(new self::C::•().m);
  self::takeOON(new self::C::•().m);
  self::takeOOO(new self::C::•().m);
  self::takeOOI(new self::C::•().m);
  self::takeIDI(new self::C::•().m);
  self::takeDID(new self::C::•().m);
}
static method takeIII(dynamic fn) → void {}
static method takeDDD(dynamic fn) → void {}
static method takeIDI(dynamic fn) → void {}
static method takeDID(dynamic fn) → void {}
static method takeIDN(dynamic fn) → void {}
static method takeDIN(dynamic fn) → void {}
static method takeIIN(dynamic fn) → void {}
static method takeDDN(dynamic fn) → void {}
static method takeNNN(dynamic fn) → void {}
static method takeOON(dynamic fn) → void {}
static method takeOOO(dynamic fn) → void {}
static method takeOOI(dynamic fn) → void {}
static method takeIIO(dynamic fn) → void {}
static method takeDDO(dynamic fn) → void {}
