library;
import self as self;
import "dart:core" as core;

class B extends self::Object&M1&M2 {
  constructor •(dynamic value) → void
    ;
}
abstract class M1 extends core::Object {
  constructor •() → void
    ;
  method m() → dynamic
    ;
}
abstract class M2 extends core::Object {
  constructor •() → void
    ;
  method m() → dynamic
    ;
}
class C extends self::Object&M1&M2 {
  constructor •(dynamic value) → void
    ;
}
abstract class G1<T extends core::Object> extends core::Object {
  constructor •() → void
    ;
  method m() → dynamic
    ;
}
class D<S extends core::Object> extends self::D^G1<self::D::S> {
  constructor •() → void
    ;
}
abstract class Object&M1 = core::Object with self::M1 {
}
abstract class Object&M1&M2 = self::Object&M1 with self::M2 {
}
abstract class D^G1<S extends core::Object> = core::Object with self::G1<self::D^G1::S> {
}
static method main() → dynamic
  ;
