library;
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

class A extends core::Object {
  constructor •() → void
    : super core::Object::•() {}
  method m() → core::int {}
  static factory foo() → self::A
    invalid-statement;
}
class C extends self::A {
  constructor •() → void
    : super self::A::•() {}
  method m() → core::int {
    return 1;
  }
  static factory bar() → self::C
    throw "Missing constructor: D";
}
class D extends self::C {
  constructor •() → void
    : super self::C::•()
    ;
  method m() → core::int {
    return 2;
  }
}
static method main() → dynamic {
  self::A a = self::C::bar();
  exp::Expect::equals(2, a.m(), null);
}
