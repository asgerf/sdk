library;
import self as self;
import "dart:core" as core;

class Closure#main#g extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field Vector context;
  constructor •(final Vector context) → dynamic
    : self::Closure#main#g::context = context
    ;
  method call(dynamic x) → dynamic {
    "This is a temporary solution. In the VM, this will become an additional parameter.";
    final Vector #contextParameter = this.{self::Closure#main#g::context};
    return (#contextParameter[1]).[](x);
  }
}
static field dynamic f = null;
static method foo() → dynamic {
  core::print(self::f.call(0));
}
static method main(dynamic arguments) → dynamic {
  final Vector #context = MakeVector(2);
  #context[1] = arguments;
  final (dynamic) → dynamic g = new self::Closure#main#g::•(#context);
  self::f = g;
  self::foo();
}
