library;
import self as self;
import "dart:core" as core;
import "dart:mock" as mock;

class C extends core::Object {
  field dynamic t;
  constructor foo(dynamic f) → void
    : self::C::t = let final mock::Context #context = new mock::Context::•(1) in let dynamic #t1 = #context.[]=(0, f) in new self::Closure#C#foo#function::•(#context), super core::Object::•() {
    final mock::Context #context = new mock::Context::•(1);
    #context.[]=(0, f);
    core::print(1);
  }
}
class Closure#C#foo#function#function extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context context) → dynamic
    : self::Closure#C#foo#function#function::context = context
    ;
  method call(dynamic x) → dynamic {
    "This is a temporary solution. In the VM, this will become an additional parameter.";
    final mock::Context #contextParameter = this.{self::Closure#C#foo#function#function::context};
    #contextParameter.parent.[](0).call("${#contextParameter.[](0)}${x}");
  }
}
class Closure#C#foo#function extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context context) → dynamic
    : self::Closure#C#foo#function::context = context
    ;
  method call() → dynamic {
    "This is a temporary solution. In the VM, this will become an additional parameter.";
    final mock::Context #contextParameter = this.{self::Closure#C#foo#function::context};
    final mock::Context #context = new mock::Context::•(1);
    #context.parent = #contextParameter;
    #context.[]=(0, null);
    dynamic g = new self::Closure#C#foo#function#function::•(#context);
    #context.[]=(0, "hest");
    return g;
  }
}
class Closure#main#function extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context context) → dynamic
    : self::Closure#main#function::context = context
    ;
  method call(dynamic x) → dynamic {
    "This is a temporary solution. In the VM, this will become an additional parameter.";
    final mock::Context #contextParameter = this.{self::Closure#main#function::context};
    return core::print(x);
  }
}
static method main() → dynamic {
  core::print(0);
  dynamic c = new self::C::foo(new self::Closure#main#function::•(null));
  core::print(2);
  c.t().call("fisk");
  core::print(3);
}
