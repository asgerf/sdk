library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  field Null&core::Object field = null;
  constructor •() → Bottom
    : super core::Object::•()
    ;
}
class B extends core::Object {
  field Null&core::Object field = null;
  constructor •() → Bottom
    : super core::Object::•()
    ;
}
class C extends core::Object {
  constructor •() → Bottom
    : super core::Object::•()
    ;
  operator ==(core::Object+? x) → core::bool!
    return false;
}
class X extends core::Object implements self::A, self::B {
  field Null&core::Object field = null;
  constructor •() → Bottom
    : super core::Object::•()
    ;
}
static method useAsA(core::Object+&self::A object) → Null {
  Null&core::Object _ = object.{self::A::field};
}
static method useAsB(core::Object+&self::B object) → Null {
  Null&core::Object _ = object.{self::B::field};
  self::escape(object);
}
static method escape(core::Object+ x) → Null {
  x.==(null) ? x = "" : null;
  x.==(null) ? x = 45 : null;
  if(!(x is core::int) && !(x is core::String)) {
    x.field = 45;
  }
}
static method main() → Null&core::Object {
  self::X! object = new self::X::•();
  self::useAsA(new self::A::•());
  self::useAsA(object);
  self::useAsB(new self::B::•());
  self::useAsB(object);
}
